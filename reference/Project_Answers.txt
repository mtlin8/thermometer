			     EE 109  - Spring 2022
				  Thermometer


Review Question 1 (Cost Analysis):

Assume we are building 1000 units of this system.  Use the provided part
numbers (see the webpage) and the digikey.com or jameco.com website to find the
total **cost per unit** (again assume we build a quantity of 1000 units) for
these thermometers.  Itemize the part costs (list each part and its
unit cost when bought in units of 1000) and then show the final cost per unit
below.  Note: You only need to price the components used in the project (not
all the components in your lab kit.  Also, you do not need to account for the
cost of the circuit board or wires. In a real environment we would manufacture
a PCB (Printed Circuit Board). As an optional task, you can search online for
PCB manufacturers and what the costs and options are in creating a PCB.

1 DS18B20: $3234
1 SG92R Servo: $5950
2 SLR-56VR3F LEDs: $339.62
2 COM-10302 Buttons: $1953.90
1 74AHCT125N Buffer: $1200
1 AI-1223-TWT-5V-5-R Buzzer: $1200
1 3315Y-016L: $777.12
4 resistors: $2543.22
1 Arduino: $23000
1 LCD shield: $7890
TOTAL: $47295.10

PER UNIT: ~ $47.30



Review Question 2 (Health/Safety/Reliability)

Assume this system was to be sold to consumers for use at their home.

Considering reliability, health, and safety...

 - What scenarios might you suggest testing (considering both HW and SW) 
    before releasing the product for use? 

    I would consider testing extremes that temperatures might hit in order to test the functionality 
    of our thermometer (ice baths and saunas). We want our thermometer to be able to detect a wide range of temperatures
    so that our users can have greater reassurance of their being informed.
    I would put it in an ice bath to test the lower extreme.
    I would put it in a sauna to test the higher extreme.
    These both will make sure the HW and SW function properly at the extremes.

 - How might you make your design more reliable? By reliability we don't just
   mean keeping it running correctly (though you should consider that), but
   also how you can detect that a connected component has failed to gracefully
   handle such situations.  You can consider both HW and SW points of failure,
   issues related to the operational environment, etc. and how to mitigate
   those cases.

   One thing we can do to check for HW point of failure point of failure when it comes down to loose/oversensitive components
   is having explicit print statements to the LCD to more effectively help our user debug, especially when something is called
   in software that wasn't wired properly in hardware. Perhaps we can keep an old state and new state for remote each 
   hundred times through the loop so that if the state changed without the button being pressed, we can self-correct.

   One thing we can do for SW point of failure when it comes down to variable overflow 
   is having a reset if loop that is checked each time through the while loop so that any variables or timers
   that consistently increase don't hold the wrong values all of a sudden because their values were too large.

   One thing we can do to counter the thermometer overheating is by indicating that the thermometer is overheating
   beyond a certain temperature. Though by that point the human in question is likely already dead, rendering my point moot.
   






